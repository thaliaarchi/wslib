# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# abs returns the absolute value of x.
# (x -- |x|)
abs:
    ^ jn .abs_neg
    ret
.abs_neg:
    neg ret

# sign returns 1 if x > 0, 0 if x == 0, or -1 if x < 0.
# (x -- sign)
sign:
    ^ jz .sign_zero
    jn .sign_neg
    1 ret
.sign_neg:
    -1
.sign_zero:
    ret

# min returns the lesser value of x and y.
# (x y -- min)
min:
    2dup j< .min_x_lt_y
    swap
.min_x_lt_y:
    drop ret

# max returns the greater value of x and y.
# (x y -- max)
max:
    2dup j< .max_x_lt_y
    swap
.max_x_lt_y:
    1slide ret

# sort2 returns the lesser value of x and y, followed by the greater
# value.
# (x y -- min max)
sort2:
    2dup j< .sort2_x_lt_y
    swap
.sort2_x_lt_y:
    ret

# in_range returns 1 if x is between min and max (inclusive) and 0
# otherwise.
# (min max x -- ?)
in_range:
    swap ^1 j< .in_range_higher
    swap j< .in_range_lower
    1 ret
.in_range_higher:
    2drop
.in_range_lower:
    0 ret

# sum computes the sum of all numbers below x.
# (x -- sum)
sum:
    # x(x+1)/2
    ^ 1+ * 2/ ret

# sum_multiples computes the sum of all numbers below x that are
# divisible by d.
# (x d -- sum)
sum_multiples:
    swap ^1 /
    ^ 1+ * 2/
    * ret

# sum_squares computes the sum of the squares of all numbers below x.
# (x -- sum)
sum_squares:
    # x(x+1)(2x+1)/6
    ^ 1+ ^1 2* 1+ * * 6/ ret
