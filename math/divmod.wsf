# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# t_fdiv, t_fmod, t_ediv, and t_emod translated from C versions defined
# in "Division and Modulus for Computer Scientists" (Daan Leijen, 2001)
# http://research.microsoft.com/pubs/151917/divmodnote.pdf

# Truncated division
#   q = trunc(x / y)
# Floored division
#   q = floor(x / y)
# Euclidean division
#   y > 0 => q = floor(x/y)
#   y < 0 => q = ceil(x/y)
# Rounding division
#   q = round(x/y)
# Ceiling division
#   q = ceil(x/y)

#             Truncated    Floor      Euclidean   Ceiling     Rounding
#  x    y     x/y  x%y    x/y  x%y    x/y  x%y    x/y  x%y    x/y  x%y
#  5    3      1    2      1    2      1    2      2   -1      2   -1
# -5    3     -1   -2     -2    1     -2    1     -1   -2     -2    1
#  5   -3     -1    2     -2   -1     -1    2     -1    2     -2   -1
# -5   -3      1   -2      1   -2      2    1      2    1      2    1

# tdiv returns the truncated division of x and y.
# (x y -- quo)
# tdiv:

# tmod returns the truncated modulo of x and y.
# (x y -- rem)
# tmod:

# fdiv returns the floored division of x and y. Supports platforms that
# use truncated or floored division.
# (x y -- quo)
fdiv:
    -5 3 / -1 j= t_fdiv
    / ret

# fmod returns the floored modulo of x and y. Supports platforms that
# use truncated or floored modulo.
# (x y -- rem)
fmod:
    -5 3 % -2 j= t_fmod
    % ret

# ediv returns the Euclidean division of x and y.
# (x y -- quo)
# ediv:

# emod returns the Euclidean modulo of x and y.
# (x y -- rem)
# emod:

# rdiv returns the rounding division of x and y.
# (x y -- quo)
# rdiv:

# rmod returns the rounding modulo of x and y.
# (x y -- rem)
# rmod:

# cdiv returns the ceiling division of x and y.
# (x y -- quo)
# cdiv:

# cmod returns the ceiling modulo of x and y.
# (x y -- rem)
# cmod:

# t_fdiv returns the floored division of x and y, in terms of truncated
# division.
# (x y -- quo)
t_fdiv:
    # q := x / y
    # r := x % y
    # if (r > 0 && y < 0) || (r < 0 && y > 0)
    #   return q - 1
    # else
    #   return q

    2dup %
    ^ jn .t_fdiv_r_lt_0
    ^ neg jn .t_fdiv_r_gt_0
.t_fdiv_q:
    drop / ret # return q
.t_fdiv_r_lt_0:
    ^1 neg jn .t_fdiv_q1 # r < 0 && y > 0
    jmp .t_fdiv_q
.t_fdiv_r_gt_0:
    ^1 jn .t_fdiv_q1 # r > 0 && y < 0
    jmp .t_fdiv_q
.t_fdiv_q1:
    drop / 1- ret # return q - 1

# t_emod returns the floored modulo of x and y, in terms of truncated
# division.
# (x y -- rem)
t_fmod:
    # r := x % y
    # if (r > 0 && y < 0) || (r < 0 && y > 0)
    #   return r + y
    # else
    #   return r

    2dup %
    ^ jn .t_fmod_r_lt_0
    ^ neg jn .t_fmod_r_gt_0
.t_fmod_r:
    2slide ret # return r
.t_fmod_r_lt_0:
    ^1 neg jn .t_fmod_ry # r < 0 && y > 0
    jmp .t_fmod_r
.t_fmod_r_gt_0:
    ^1 jn .t_fmod_ry # r > 0 && y < 0
    jmp .t_fmod_r
.t_fmod_ry:
    + 1slide ret # return r + y

# t_ediv returns the Euclidean division of x and y, in terms of
# truncated division.
# (x y -- quo)
t_ediv:
    # q := x / y
    # r := x % y
    # if r < 0
    #   if y > 0 return q - 1
    #   else     return q + 1
    # return q

    2dup % jn .t_ediv_r_lt_0
    / ret # r >= 0 => q
.t_ediv_r_lt_0:
    ^ 1 j< .t_ediv_y_le_0
    / 1- ret # r < 0 && y > 0 => q - 1
.t_ediv_y_le_0:
    / 1+ ret # r < 0 && y <= 0 => q + 1

# t_emod returns the Euclidean modulo of x and y, in terms of truncated
# division.
# (x y -- rem)
t_emod:
    # r := x % y
    # if r < 0
    #   if y > 0 return r + y
    #   else     return r - y
    # return r

    2dup % ^ jn .t_emod_r_lt_0
    2slide ret # r >= 0 => q
.t_emod_r_lt_0:
    ^1 1 j< .t_emod_y_le_0
    + 1slide ret # y > 0 => q + y
.t_emod_y_le_0:
    swap - 1slide ret # y <= 0 => q - y
