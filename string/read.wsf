# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@char" import

# read reads len chars and stores it on the heap starting at addr.
# (addr len -- )
read:
    ^1 1- + swap
.read_loop:
    2dup j< .read_ret
    ^ readc
    1+
    jmp .read_loop
.read_ret:
    2drop ret

# read_line reads a line of text (or until EOF), stores it on the heap
# starting at addr terminated with -1, and returns the length (not
# including '\n').
# (addr -- len)
read_line:
    '\n' # fallthrough

# read_until reads text until the delimiter (or EOF), stores it on the
# heap starting at addr terminated with -1, and returns the length (not
# including the delimiter).
# (addr delim -- len)
read_until:
    ^1
.read_until_loop:
    ^ ^ readc retrieve
    ^ ^3 j= .read_until_ret
    ^ jeof .read_until_ret
    drop 1+
    jmp .read_until_loop
.read_until_ret:
    drop swap drop
    ^ -1 store # overwrite delim with -1
    swap - ret

# read_until_space reads text until a Unicode whitespace character or
# EOF, stores it on the heap starting at addr terminated with -1, and
# returns the length (not including the delimiter).
# (addr -- len)
read_until_space:
    ^
.read_until_space_loop:
    ^ ^ readc retrieve
    ^ call char.is_space ! jz .read_until_space_ret
    ^ jeof .read_until_space_ret
    drop 1+
    jmp .read_until_space_loop
.read_until_space_ret:
    drop swap
    ^ -1 store # overwrite space with -1
    swap - ret

# read_eof reads text until EOF, stores it on the heap starting at addr
# terminated with -1, and returns the length.
# (addr -- len)
read_eof:
    ^
.read_eof_loop:
    ^ ^ readc retrieve
    jeof .read_eof_ret
    1+
    jmp .read_eof_loop
.read_eof_ret:
    ^ -1 store # overwrite 0 with -1
    swap - ret
