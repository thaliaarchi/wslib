# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@char" import
    "@int"  import

# print prints a heap string of the given length.
# (addr len -- )
print:
    1-
    ^ jn .print_ret
    swap ^ retrieve printc 1+ swap
    jmp print
.print_ret:
    2drop ret

# print_0 prints a zero-terminated heap string.
# (addr -- )
print_0:
    ^ retrieve
    ^ jz .print_0_ret
    printc 1+
    jmp print_0
.print_0_ret:
    2drop ret

# print_neg prints a negative-terminated heap string.
# (addr -- )
print_neg:
    ^ retrieve
    ^ jn .print_neg_ret
    printc 1+
    jmp print_neg
.print_neg_ret:
    2drop ret

# print_stack prints a length-prefixed stack string.
# (str... len -- )
print_stack:
    1-
    ^ jn .print_stack_ret
    swap printc
    jmp print_stack
.print_stack_ret:
    drop ret

# print_0_stack prints a zero-terminated stack string.
# (0 str... -- )
print_0_stack:
    ^ jz .print_0_stack_ret
    printc
    jmp print_0_stack
.print_0_stack_ret:
    drop ret

# print_neg_stack prints a negative-terminated stack string.
# (-1 str... -- )
print_neg_stack:
    ^ jn .print_neg_stack_ret
    printc
    jmp print_neg_stack
.print_neg_stack_ret:
    drop ret


# println prints a heap string of the given length and a line feed
# afterwards.
# (addr len -- )
println:
    call print '\n' printc ret

# println_0 prints a zero-terminated heap string and a line feed
# afterwards.
# (addr -- )
println_0:
    call print_0 '\n' printc ret

# println_neg prints a negative-terminated heap string and a line feed
# afterwards.
# (addr -- )
println_neg:
    call print_neg '\n' printc ret

# println_stack prints a length-prefixed stack string and a line feed
# afterwards.
# (str... len -- )
println_stack:
    call print_stack '\n' printc ret

# println_0_stack prints a zero-terminated stack string and a line feed
# afterwards.
# (0 str... -- )
println_0_stack:
    call print_0_stack '\n' printc ret

# println_neg_stack prints a negative-terminated stack string and a line
# feed afterwards.
# (-1 str... -- )
println_neg_stack:
    call print_neg_stack '\n' printc ret

# printf prints a stack string with format verbs, stopping at -1.
#
# The format verbs are defined as follows:
#
#      -1  =>      end of string
#    x -2  => %d   decimal
#    x -3  => %b   binary
#    x -4  => %o   octal
#    x -5  => %x   hexadecimal
#    x -6  => %#b  binary with 0b prefix
#    x -7  => %#o  octal with 0o prefix
#    x -8  => %#x  hexadecimal with 0x prefix
#  x w -9  => %0wb binary with 0 padding
#  x w -10 => %0wo octal with 0 padding
#  x w -11 => %0wx hexadecimal with 0 padding
#  x w -12 => %wb  binary with space padding
#  x w -13 => %wo  octal with space padding
#  x w -14 => %wx  hexadecimal with space padding
#    c -15 => %q   quoted char
# s... -16 => %s   string
#
# (-1 str... -- )
printf:
    ^ jn .printf_verb
    printc
    jmp printf
.printf_verb:
    1+ ^ jz .printf_ret        # -1
    1+ ^ jz .printf_d          # -2
    1+ ^ jz .printf_b          # -3
    1+ ^ jz .printf_o          # -4
    1+ ^ jz .printf_x          # -5
    1+ ^ jz .printf_b_prefixed # -6
    1+ ^ jz .printf_o_prefixed # -7
    1+ ^ jz .printf_x_prefixed # -8
    1+ ^ jz .printf_b_pad_0    # -9
    1+ ^ jz .printf_o_pad_0    # -10
    1+ ^ jz .printf_x_pad_0    # -11
    1+ ^ jz .printf_b_pad_s    # -12
    1+ ^ jz .printf_o_pad_s    # -13
    1+ ^ jz .printf_x_pad_s    # -14
    1+ ^ jz .printf_q          # -15
    1+ ^ jz .printf_s          # -16
    '!' printc
    # fallthrough
.printf_ret:
    drop ret
.printf_d:
    drop printi jmp printf
.printf_b:
    drop 2 call int.print_base jmp printf
.printf_o:
    drop 8 call int.print_base jmp printf
.printf_x:
    drop 16 call int.print_base jmp printf
.printf_b_prefixed:
    drop 2 call int.print_base_prefixed jmp printf
.printf_o_prefixed:
    drop 8 call int.print_base_prefixed jmp printf
.printf_x_prefixed:
    drop 16 call int.print_base_prefixed jmp printf
.printf_b_pad_0:
    2 jmp .printf_pad_0
.printf_o_pad_0:
    8 jmp .printf_pad_0
.printf_x_pad_0:
    16 jmp .printf_pad_0
.printf_b_pad_s:
    2 jmp .printf_pad_s
.printf_o_pad_s:
    8 jmp .printf_pad_s
.printf_x_pad_s:
    16 jmp .printf_pad_s
.printf_q:
    drop call char.print_quote jmp printf
.printf_s:
    drop call printf jmp printf
.printf_pad_0:
    1slide swap ^2 swap # (x w verb base -- x base x w)
    call int.print_base_pad_0
    drop
    jmp printf
.printf_pad_s:
    1slide swap ^2 swap # (x w verb base -- x base x w)
    call int.print_base_pad_s
    drop
    jmp printf
