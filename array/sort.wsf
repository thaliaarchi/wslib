# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# quicksort sorts an array using the Quicksort algorithm.
# (addr len -- )
quicksort:
    ^1 + 1-
# .quicksort recursively sorts a segment of an array. Bounds are
# inclusive.
# (lo hi -- )
.quicksort:
    ^ ^2 - 1-
    ^ jn .quicksort_1  # one or fewer elements
    ^ jz .quicksort_2  # two elements
    1- jz .quicksort_3 # three elements
    2dup 2dup call .median_of_three call .partition
    ^2 ^1   call .quicksort # lo p
    1+ swap call .quicksort # p+1 hi
    drop ret
.quicksort_1:
    3drop ret
.quicksort_2:
    drop jmp .sort_2
.quicksort_3:
    ^ 1- swap jmp .sort_3

# .sort_2 sorts the elements at the two addresses such that
# A[i] <= A[j].
# (i j -- )
.sort_2:
    swap ^ retrieve swap ^2 retrieve
    ^ ^3 j< .sort_2_swap
    4drop ret
.sort_2_swap:
    store store ret

# .sort_3 sorts the elements at the three addresses such that
# A[i] <= A[j] <= A[k].
# (i j k -- )
.sort_3:
    call .sort_3_with_median
    drop ret

# .sort_3_with_median sorts the elements at the three addresses such
# that A[i] <= A[j] <= A[k] and returns the median value of the three.
# (i j k -- med)
.sort_3_with_median:
    # Performs 3 retrieves and stores in every case.
    # Branches are inverted and undo the already-swapped elements.
    ^2 retrieve        # A[i]
    ^1 retrieve        # A[k]
    ^ ^2 j< .sort_3_checked_i_k
    swap
.sort_3_checked_i_k:
    ^3 retrieve        # A[j]
    ^ ^2 j< .sort_3_checked_i_j
    swap
.sort_3_checked_i_j:
    ^5 swap store      # A[i] = min
    ^ ^2 j< .sort_3_checked_j_k
    swap
.sort_3_checked_j_k:
    ^3 ^1 store        # A[j] = median
    swap ^2 swap store # A[k] = max
    3slide ret         # return median

# .median_of_three sorts the elements at the addresses lo, hi, and mid
# (the midpoint of lo and hi) such that A[lo] <= A[hi] <= A[mid]. This
# places the median at A[hi] and this is returned as the pivot.
# (lo hi -- pivot)
.median_of_three:
    2dup ^1 - 2/ + # mid = lo + (hi-lo)/2
    jmp .sort_3_with_median

# .partition divides the array into two partitions where all values to
# the left of p are less than pivot and all values to the right of (and
# including) p are greater than or equal to pivot. lo and hi bounds are
# inclusive. A[hi] must be set to the pivot value.
# (lo hi pivot -- p)
.partition:
    ^1 1+ # right index: j = hi+1
    ^3 1- # left index: i = lo-1

    # Move i rightward while all elements to
    # the left are less than the pivot.
.partition_left_loop:
    1+ # do i++ while A[i] < pivot
    ^ retrieve ^3 j< .partition_left_loop

    # Move j leftward while all elements to
    # the right are greater than the pivot.
    swap
.partition_right_loop:
    1- # do j-- while A[j] > pivot
    ^2 ^1 retrieve j< .partition_right_loop

    ^1 ^1 j< .partition_swap
    4slide ret # return j if i >= j

.partition_swap:
    # A[i], A[j] = A[j], A[i]
    ^ ^2 retrieve ^3 ^3 retrieve store store
    swap
    jmp .partition_left_loop
