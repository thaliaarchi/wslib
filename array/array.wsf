# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@bool" import
    "@math" import

# count returns the number of occurrences of x in the array.
# (addr len x -- count)
count:
    swap ^2 + 1-
    ^2 0 # i count
.count_loop:
    ^2 ^2 j< .count_ret
    ^1 retrieve ^4 = +
    swap 1+ swap
    jmp .count_loop
.count_ret:
    4slide ret

# contains returns whether x is contained within the array.
# (addr len x -- ?)
contains:
    call index_of jn .contains_false
    1 ret
.contains_false:
    0 ret

# index_of returns the index of x in the array or -1 if not found.
# (addr len x -- i)
index_of:
    swap 1- 0
.index_of_loop:
    2dup j< .index_of_not_found
    ^ ^4 + retrieve ^3 j= .index_of_found
    1+
    jmp .index_of_loop
.index_of_not_found:
    -1 1slide
.index_of_found:
    3slide ret

# sum returns the sum of the array elements.
# (addr len -- sum)
sum:
    ^1 + 1- swap
    0 # sum
.sum_loop:
    ^2 ^2 j< .sum_ret
    ^1 retrieve +
    swap 1+ swap
    jmp .sum_loop
.sum_ret:
    2slide ret

# prod returns the product of the array elements.
# (addr len -- prod)
prod:
    ^1 + 1- swap
    1 # prod
.prod_loop:
    ^2 ^2 j< .prod_ret
    ^1 retrieve *
    swap 1+ swap
    jmp .prod_loop
.prod_ret:
    2slide ret

# min returns the minimum of the array elements. Not defined for len
# less than 1.
# (addr len -- min)
min:
    ^1 + 1- swap
    ^ retrieve # min
.min_loop:
    swap 1+ swap
    ^1 retrieve call math.min
    ^1 ^3 j< .min_loop
    2slide ret

# max returns the maximum of the array elements. Not defined for len
# less than 1.
# (addr len -- max)
max:
    ^1 + 1- swap
    ^ retrieve # max
.max_loop:
    swap 1+ swap
    ^1 retrieve call math.max
    ^1 ^3 j< .max_loop
    2slide ret
