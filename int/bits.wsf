# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@math" import

# Negative operand handling borrowed from Go
# https://go.dev/src/math/big/int.go#L1072

# and returns the bitwise AND of x and y.
# (x y -- x&y)
and:
    ^1 jn .and_xneg
    ^ jn .and_yneg
    jmp uand
.and_xneg:
    ^ jn .and_xyneg
    # AND is symmetric
    swap
.and_yneg:
    # x & (-y)
    # == x & ^(y-1)
    # == x &^ (y-1)
    neg 1-
    jmp uandnot
.and_xyneg:
    # (-x) & (-y)
    # == ^(x-1) & ^(y-1)
    # == ^((x-1) | (y-1))
    # == -(((x-1) | (y-1)) + 1)
    neg 1- swap neg 1-
    call uor 1+ neg ret

# or returns the bitwise OR of x and y.
# (x y -- x|y)
or:
    ^1 jn .or_xneg
    ^ jn .or_yneg
    jmp uor
.or_xneg:
    ^ jn .or_xyneg
    # OR is symmetric
    swap
.or_yneg:
    # x | (-y)
    # == x | ^(y-1)
    # == ^((y-1) &^ x)
    # == -(^((y-1) &^ x) + 1)
    neg 1- swap
    call uandnot 1+ neg ret
.or_xyneg:
    # (-x) | (-y)
    # == ^(x-1) | ^(y-1)
    # == ^((x-1) & (y-1))
    # == -(((x-1) & (y-1)) + 1)
    neg 1- swap neg 1-
    call uand 1+ neg ret

# xor returns the bitwise XOR of x and y.
# (x y -- x^y)
xor:
    ^1 jn .xor_xneg
    ^ jn .xor_yneg
    jmp uxor
.xor_xneg:
    ^ jn .xor_xyneg
    # XOR is symmetric
    swap
.xor_yneg:
    # x ^ (-y)
    # == x ^ ^(y-1)
    # == ^(x ^ (y-1))
    # == -((x ^ (y-1)) + 1)
    neg 1-
    call uxor 1+ neg ret
.xor_xyneg:
    # (-x) ^ (-y)
    # == ^(x-1) ^ ^(y-1)
    # == (x-1) ^ (y-1)
    neg 1- swap neg 1-
    jmp uxor

# andnot returns the bitwise AND NOT of x and y.
# (x y -- x&^y)
andnot:
    ^1 jn .andnot_xneg
    ^ jn .andnot_yneg
    jmp uandnot
.andnot_xneg:
    ^ jn .andnot_xyneg
    # (-x) &^ y
    # == ^(x-1) &^ y
    # == ^(x-1) & ^y
    # == ^((x-1) | y)
    # == -(((x-1) | y) + 1)
    swap neg 1-
    call uor 1+ neg ret
.andnot_yneg:
    # x &^ (-y)
    # == x &^ ^(y-1)
    # == x & (y-1)
    neg 1-
    jmp uand
.andnot_xyneg:
    # (-x) &^ (-y)
    # == ^(x-1) &^ ^(y-1)
    # == ^(x-1) & (y-1)
    # == (y-1) &^ (x-1)
    neg 1- swap neg 1-
    jmp uandnot

# uand returns the bitwise AND of unsigned x and y.
# Requires x>=0 && y>=0
# (x y -- x&y)
uand:
    # i, z
    1 0
.uand_loop:
    ^3 ^3 + jz .uand_ret

    # z += (x%2 * y%2) * i
    ^3 2%
    ^3 2%
    *
    ^2 *
    +

    ^3 2/ # x/2
    ^3 2/ # y/2
    ^3 2* # i*2
    ^3    # z
    call .uand_loop

    1slide
.uand_ret:
    3slide ret

# uor returns the bitwise OR of unsigned x and y.
# Requires x>=0 && y>=0
# (x y -- x|y)
uor:
    # i, z
    1 0
.uor_loop:
    ^3 ^3 + jz .uor_ret

    # z += (x%2 + y%2 - (x%2 * y%2)) * i
    ^3 2%
    ^3 2%
    2dup *
    - +
    ^2 *
    +

    ^3 2/ # x/2
    ^3 2/ # y/2
    ^3 2* # i*2
    ^3    # z
    call .uor_loop

    1slide
.uor_ret:
    3slide ret

# uxor returns the bitwise XOR of unsigned x and y.
# Requires x>=0 && y>=0
# (x y -- x^y)
uxor:
    # i, z
    1 0
.uxor_loop:
    ^3 ^3 + jz .uxor_ret

    # z += (x%2 + y%2)%2 * i
    ^3 2%
    ^3 2%
    + 2%
    ^2 *
    +

    ^3 2/ # x/2
    ^3 2/ # y/2
    ^3 2* # i*2
    ^3    # z
    call .uxor_loop

    1slide
.uxor_ret:
    3slide ret

# uandnot returns the bitwise AND NOT of unsigned x and y.
# Requires x>=0 && y>=0
# (x y -- x&^y)
uandnot:
    # i, z
    1 0
.uandnot_loop:
    ^3 ^3 + jz .uandnot_ret

    # z += (x%2 * (1 - y%2)) * i
    ^3 2%
    1 ^4 2% -
    *
    ^2 *
    +

    ^3 2/ # x/2
    ^3 2/ # y/2
    ^3 2* # i*2
    ^3    # z
    call .uandnot_loop

    1slide
.uandnot_ret:
    3slide ret

# shl returns x shifted left by y bits.
# (x y -- x<<y)
shl:
    2 swap ** * ret

# shr returns x shifted right by y bits.
# (x y -- x>>y)
shr:
    2 swap ** / ret

# not returns the bitwise complement of x.
# (x -- ^x)
not:
    1+ neg ret

# bit_len returns the length of the absolute value of x in bits. The bit
# length of 0 is 0.
# (x -- l)
bit_len:
    call math.abs
    0
.bit_len_loop:
    swap
    ^ jz .bit_len_ret
    2/ swap 1+
    jmp .bit_len_loop
.bit_len_ret:
    drop ret

# pop_count returns the population count, or the number of 1 bits, of
# the absolute value of x.
# (x -- n)
pop_count:
    call math.abs
    0 swap
.pop_count_loop:
    ^ jz .pop_count_done
    ^ 2% jz .pop_count_0
    swap 1+ swap
.pop_count_0:
    2/
    jmp .pop_count_loop
.pop_count_done:
    drop ret
