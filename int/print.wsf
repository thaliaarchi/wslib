# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@math" import

# print_base prints x in the given base. The alphabet is [0-9a-z] for
# bases 2..=36 and [0-9A-Za-z] for bases 37..=62.
# Requires 2<=base<=62
# (x base -- )
print_base:
    swap
    call .print_sign
.printu_base:
    2dup call .next_pow
.printu_base_pad_0:
    ^2 11 j< .printu_base10
    ^2 37 j< .printu_base36
    jmp .printu_base62

# print_base_prefixed prints x in the given base with a 0b prefix for
# base 2, 0o for base 8, or 0x for base 16. The alphabet is [0-9a-z] for
# bases 2..=36 and [0-9A-Za-z] for bases 37..=62.
# Requires 2<=base<=62
# (x base -- )
print_base_prefixed:
    swap
    call .print_sign
    ^1 call .print_base_prefix
    jmp .printu_base

# print_base_pad_0 prints x in the given base, padded with zeros to at
# least a width of w.
# Requires 2<=base<=62 && base**n==w
# (base x w -- )
print_base_pad_0:
    swap
    call .print_sign
    swap
    ^2 swap **
    ^2 ^2 call .next_pow
    call math.max
    jmp .printu_base_pad_0

# print_base_pad_s prints x in the given base, padded with spaces to at
# least a width of w.
# Requires 2<=base<=62 && base**n==w
# (base x w -- )
print_base_pad_s:
    ^2 ^2 call .width
    -
.print_base_pad_s_loop:
    1-
    ^ jn .print_base_pad_s_done
    ' ' printc
    jmp .print_base_pad_s_loop
.print_base_pad_s_done:
    drop swap
    jmp print_base

# .print_sign prints '-' for negative numbers and returns the absolute
# value.
# (x -- |x|)
.print_sign:
    ^ jn .print_sign_neg
    ret
.print_sign_neg:
    neg '-' printc
    ret

# .print_base_prefix prints the prefix for a number: 0b for base 2, 0o
# for base 8, and 0x for base 16.
# (base -- )
.print_base_prefix:
    ^ 2  j= .print_base_2_prefix
    ^ 8  j= .print_base_8_prefix
    ^ 16 j= .print_base_16_prefix
    drop ret
.print_base_2_prefix:
    'b' jmp .print_base_prefix_ret
.print_base_8_prefix:
    'o' jmp .print_base_prefix_ret
.print_base_16_prefix:
    'x' # fallthrough
.print_base_prefix_ret:
    '0' printc printc
    drop ret

# .next_pow returns the next power of base greater than or equal to x.
# Requires x>=0 && base>=2
# (base x -- pow)
.next_pow:
    ^1
.next_pow_loop:
    swap
    ^2 /
    ^ jz .next_pow_ret
    swap
    ^2 *
    jmp .next_pow_loop
.next_pow_ret:
    drop 1slide ret

# bit_len returns the byte width of x in the given base.
# (base x -- w)
.width:
    ^ jn .width_neg
    0
.width_loop:
    1+
    swap
    ^2 /
    ^ jz .width_ret
    swap
    jmp .width_loop
.width_ret:
    drop 1slide ret
.width_neg:
    neg 1 jmp .width_loop

# .printu_base10 prints x in the given base with the alphabet [0-9].
# Requires 2<=base<=10 && 0<=x<=pow
# (base x pow -- )
.printu_base10:
    # pow /= base
    ^2 /
    ^ jz .printu_base10_ret
    # x/pow % base
    2dup / ^3 % printi
    jmp .printu_base10
.printu_base10_ret:
    3drop ret

# .printu_base36 prints x in the given base with the alphabet [0-9a-z].
# Requires 2<=base<=36 && 0<=x<=pow
# (base x pow -- )
.printu_base36:
    # pow /= base
    ^2 /
    ^ jz .printu_base36_ret
    2dup / ^3 %
    ^ 10 j< .printu_base36_10
    # (x/pow % base) - 10 + 'a'
    87+ printc
    jmp .printu_base36
.printu_base36_10:
    # x/pow % base
    printi
    jmp .printu_base36
.printu_base36_ret:
    3drop ret

# .printu_base62 prints x in the given base with the alphabet
# [0-9A-Za-z].
# Requires 2<=base<=62 && 0<=x<=pow
# (base x pow -- )
.printu_base62:
    # pow /= base
    ^2 /
    ^ jz .printu_base62_ret
    2dup / ^3 %
    ^ 10 j< .printu_base62_10
    ^ 36 j< .printu_base62_36
    # (x/pow % base) - 36 + 'a'
    61+ printc
    jmp .printu_base62
.printu_base62_10:
    # x/pow % base
    printi
    jmp .printu_base62
.printu_base62_36:
    # (x/pow % base) - 10 + 'A'
    55+ printc
    jmp .printu_base62
.printu_base62_ret:
    3drop ret

# format formats x in base 10.
# (x -- -1 str...)
format:
    -1 swap
    ^ jn .format_neg
.formatu:
    ^ 10% '0' +
    swap 10/
    ^ jz .formatu_done
    jmp .formatu
.formatu_done:
    drop ret
.format_neg:
    neg call .formatu '-'
    ret
