# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# and_u1 returns the bitwise AND of x and y (1-bit unsigned).
# (x y -- x&y)
and_u1:
    # x%2 * y%2
    swap 2% swap 2% * ret

# or_u1 returns the bitwise OR of x and y (1-bit unsigned).
# (x y -- x|y)
or_u1:
    # 1 - ((1 - x%2) * (1 - y%2))
    swap 1 swap 2% -
    swap 1 swap 2% - *
    1 swap - ret

# xor_u1 returns the bitwise XOR of x and y (1-bit unsigned).
# (x y -- x&y)
xor_u1:
    # (x%2 + y%2) % 2
    swap 2% swap 2% + 2% ret

# andnot_u1 returns the bitwise AND NOT of x and y (1-bit unsigned).
# (x y -- x&y)
andnot_u1:
    # x%2 * (1 - y%2)
    swap 2% swap 1 swap 2% - * ret

# and_u8 returns the bitwise AND of x and y (8-bit unsigned).
# (x y -- x&y)
and_u8:
    # zi = xi * yi
    ^1      2% ^1      2% *
    ^2   2/ 2% ^2   2/ 2% *   2* +
    ^2   4/ 2% ^2   4/ 2% *   4* +
    ^2   8/ 2% ^2   8/ 2% *   8* +
    ^2  16/ 2% ^2  16/ 2% *  16* +
    ^2  32/ 2% ^2  32/ 2% *  32* +
    ^2  64/ 2% ^2  64/ 2% *  64* +
    ^2 128/ 2% ^2 128/ 2% * 128* +
    2slide ret

# or_u8 returns the bitwise OR of x and y (8-bit unsigned).
# (x y -- x|y)
or_u8:
    # zi = 1 - ((1 - xi) * (1 - yi))
    1 ^ ^3      2% - 1 ^3      2% - * -
    1 ^ ^4   2/ 2% - 1 ^4   2/ 2% - * -   2* +
    1 ^ ^4   4/ 2% - 1 ^4   4/ 2% - * -   4* +
    1 ^ ^4   8/ 2% - 1 ^4   8/ 2% - * -   8* +
    1 ^ ^4  16/ 2% - 1 ^4  16/ 2% - * -  16* +
    1 ^ ^4  32/ 2% - 1 ^4  32/ 2% - * -  32* +
    1 ^ ^4  64/ 2% - 1 ^4  64/ 2% - * -  64* +
    1 ^ ^4 128/ 2% - 1 ^4 128/ 2% - * - 128* +
    2slide ret

# xor_u8 returns the bitwise XOR of x and y (8-bit unsigned).
# (x y -- x&y)
xor_u8:
    # zi = (xi + yi) % 2
    ^1      2% ^1      2% + 2%
    ^2   2/ 2% ^2   2/ 2% + 2%   2* +
    ^2   4/ 2% ^2   4/ 2% + 2%   4* +
    ^2   8/ 2% ^2   8/ 2% + 2%   8* +
    ^2  16/ 2% ^2  16/ 2% + 2%  16* +
    ^2  32/ 2% ^2  32/ 2% + 2%  32* +
    ^2  64/ 2% ^2  64/ 2% + 2%  64* +
    ^2 128/ 2% ^2 128/ 2% + 2% 128* +
    2slide ret

# andnot_u8 returns the bitwise AND NOT of x and y (8-bit unsigned).
# (x y -- x&y)
andnot_u8:
    # zi = xi * (1 - yi)
    ^1      2% 1 ^2      2% - *
    ^2   2/ 2% 1 ^3   2/ 2% - *   2* +
    ^2   4/ 2% 1 ^3   4/ 2% - *   4* +
    ^2   8/ 2% 1 ^3   8/ 2% - *   8* +
    ^2  16/ 2% 1 ^3  16/ 2% - *  16* +
    ^2  32/ 2% 1 ^3  32/ 2% - *  32* +
    ^2  64/ 2% 1 ^3  64/ 2% - *  64* +
    ^2 128/ 2% 1 ^3 128/ 2% - * 128* +
    2slide ret

# pop_count_u8 returns the population count of x (8-bit unsigned).
# (x -- n)
pop_count_u8:
    ^       2%
    ^1   2/ 2% +
    ^1   4/ 2% +
    ^1   8/ 2% +
    ^1  16/ 2% +
    ^1  32/ 2% +
    ^1  64/ 2% +
    ^1 128/ 2% +
    1slide ret

# exp2_u8 returns the given power of 2 in 8-bit unsigned range.
# Saturates to 1 when pow < 0 and to 128 when pow > 7.
# (pow -- 1<<pow)
exp2_u8:
    ^ 4 j< .pow_u8_0123
    ^ 6 j< .pow_u8_45
    6 j= .pow_u8_6
    128 ret
.pow_u8_6:
    64 ret
.pow_u8_45:
    4 j= .pow_u8_4
    32 ret
.pow_u8_4:
    16 ret
.pow_u8_0123:
    ^ 2 j< .pow_u8_01
    2 j= .pow_u8_2
    8 ret
.pow_u8_2:
    4 ret
.pow_u8_01:
    1 j= .pow_u8_1
    1 ret
.pow_u8_1:
    2 ret

# cast_i8 casts x (arbitrary-precision) to 8-bit signed range.
# (x -- i8)
cast_i8:
    128+ 256% 128- ret

# cast_i8 casts x (arbitrary-precision) to 16-bit signed range.
# (x -- i16)
cast_i16:
    32768+ 65536% 32768- ret

# cast_i8 casts x (arbitrary-precision) to 32-bit signed range.
# (x -- i32)
cast_i32:
    2147483648+ 4294967296% 2147483648- ret

# cast_i8 casts x (arbitrary-precision) to 64-bit signed range.
# (x -- i64)
cast_i64:
    9223372036854775808+ 18446744073709551616% 9223372036854775808- ret

# cast_u1 casts an arbitrary-precision integer to the range of a 1-bit
# unsigned integer.
cast_u1:
    2% ret

# cast_u8 casts x (arbitrary-precision) to 8-bit unsigned range.
# (x -- u8)
cast_u8:
    256% ret

# cast_u8 casts x (arbitrary-precision) to 16-bit unsigned range.
# (x -- u16)
cast_u16:
    65536% ret

# cast_u8 casts x (arbitrary-precision) to 32-bit unsigned range.
# (x -- u32)
cast_u32:
    4294967296% ret

# cast_u8 casts x (arbitrary-precision) to 64-bit unsigned range.
# (x -- u64)
cast_u64:
    18446744073709551616% ret

# and_u16 returns the bitwise AND of x and y (16-bit unsigned).
# (x y -- x&y)
and_u16:
    ^ call and_u8 swap 256/ call and_u8 256* + ret

# and_u32 returns the bitwise AND of x and y (32-bit unsigned).
# (x y -- x&y)
and_u32:
    ^ call and_u16 swap 65536/ call and_u16 65536* + ret

# and_u64 returns the bitwise AND of x and y (64-bit unsigned).
# (x y -- x&y)
and_u64:
    ^ call and_u32 swap 4294967296/ call and_u32 4294967296* + ret

# or_u16 returns the bitwise OR of x and y (16-bit unsigned).
# (x y -- x|y)
or_u16:
    ^ call or_u8 swap 256/ call or_u8 256* + ret

# or_u32 returns the bitwise OR of x and y (32-bit unsigned).
# (x y -- x|y)
or_u32:
    ^ call or_u16 swap 65536/ call or_u16 65536* + ret

# or_u64 returns the bitwise OR of x and y (64-bit unsigned).
# (x y -- x|y)
or_u64:
    ^ call or_u32 swap 4294967296/ call or_u32 4294967296* + ret

# xor_u16 returns the bitwise XOR of x and y (16-bit unsigned).
# (x y -- x^y)
xor_u16:
    ^ call xor_u8 swap 256/ call xor_u8 256* + ret

# xor_u32 returns the bitwise XOR of x and y (32-bit unsigned).
# (x y -- x^y)
xor_u32:
    ^ call xor_u16 swap 65536/ call xor_u16 65536* + ret

# xor_u64 returns the bitwise XOR of x and y (64-bit unsigned).
# (x y -- x^y)
xor_u64:
    ^ call xor_u32 swap 4294967296/ call xor_u32 4294967296* + ret

# andnot_u16 returns the bitwise AND NOT of x and y (16-bit unsigned).
# (x y -- x&^y)
andnot_u16:
    ^ call andnot_u8 swap 256/ call andnot_u8 256* + ret

# andnot_u32 returns the bitwise AND NOT of x and y (32-bit unsigned).
# (x y -- x&^y)
andnot_u32:
    ^ call andnot_u16 swap 65536/ call andnot_u16 65536* + ret

# andnot_u64 returns the bitwise AND NOT of x and y (64-bit unsigned).
# (x y -- x&^y)
andnot_u64:
    ^ call andnot_u32 swap 4294967296/ call andnot_u32 4294967296* + ret

# get_bit_u8 returns the given bit of x (8-bit unsigned).
# (x bit -- (x>>bit)&1)
get_bit_u8:
    call exp2_u8 / 2% ret

# set_bit_u8 sets the given bit of x (8-bit unsigned) to y (1-bit
# unsigned).
# (x y bit -- x')
set_bit_u8:
    # (x &^ (1<<bit)) | (y<<bit)
    # == x - ((x/pow)%2)*pow + y*pow
    # == x - ((x/pow)%2 + y)*pow
    call exp2_u8 ^2 ^ ^2 / 2% ^3 + ^2 * - 3slide ret

# clear_bit_u8 clears the given bit of x (8-bit unsigned).
# (x bit -- x')
clear_bit_u8:
    # x &^ (1<<bit)
    # == x - (x/pow)%2
    call exp2_u8 ^1 swap / 2% - ret

# not_bit_u8 sets the given bit of x (8-bit unsigned) to the complement.
# (x bit -- x')
not_bit_u8:
    # x ^ (1<<bit)

# and_bit_u8 sets the given bit of x (8-bit unsigned) to the bitwise AND
# with y (1-bit unsigned).
# (x y bit -- x')
and_bit_u8:
    # x &^ ((^y)&1 << bit)
    # == x - ((x>>bit)&1 &^ y)<<bit
    # == x - ((x/pow)%2 * (1 - y))*pow

# or_bit_u8 sets the given bit of x (8-bit unsigned) to the bitwise OR
# with y (1-bit unsigned).
# (x y bit -- x')
or_bit_u8:
    # x | (y<<bit)
    # == x + ((^x>>bit)&1 & y)<<bit
    # == x + ((1 - (x/pow)%2) * y)*pow

# xor_bit_u8 sets the given bit of x (8-bit unsigned) to the bitwise XOR
# with y (1-bit unsigned).
# (x y bit -- x')
xor_bit_u8:
    # x ^ (y<<bit)
    # == x + ((^x>>bit)&1 & y)<<bit - ((x>>bit)&1 & y)<<bit
    # == x + ((1 - (x/pow)%2) * y)*pow - ((x/pow)%2 * y)*pow
    # == x + ((1 - ((x/pow)%2)*2) * y)*pow

# (x y bit -- x')
andnot_bit_u8:
    # x &^ (y<<bit)
    # == x - ((x>>bit)&1 & y)<<bit
    # == x - ((x/pow)%2 * y)*pow
    call exp2_u8 ^2 ^ ^2 / 2% ^3 * ^3 * - 3slide ret

# (x bit1 bit2 -- x')
swap_bits_u8:
    # (x &^ (1<<bit1 | 1<<bit2)) | (x>>bit1)&1<<bit2 | (x>>bit2)&1<<bit1
    # == x - (((x/pow1)%2)*pow1 + ((x/pow2)%2)*pow2) +
    #         ((x/pow1)%2)*pow2 + ((x/pow2)%2)*pow1
    # == x + ((x/pow1)%2)*(pow2-pow1) + ((x/pow2)%2)*(pow1-pow2)
    # == x + (((x/pow1)%2) - ((x/pow2)%2))*(pow2-pow1)
    swap call exp2_u8 swap call exp2_u8
    ^2 ^ ^3 / 2% ^1 ^3 / 2% - ^3 ^5 - * + 3slide ret

# (x -- x')
reverse_u8:

#            x  0  0  1  1
#            y  0  1  0  1
# 0000   clear  0  0 -1 -1
# 0001     and  0  0 -1  0
# 0010  andnot  0  0  0 -1
# 0011          1  1  0  0 x (nop)
# 0100  notand  0  1 -1 -1 ^x&y
# 0101     set  0  1 -1  0
# 0110     xor  0  1  0 -1
# 0111      or  0  1  0  0
# 1000     nor  1  0 -1 -1
# 1001    xnor  1  0 -1  0
# 1010          1  0  0 -1 ^y
# 1011          1  0  0  0 ^(^x&y) == x|^y
# 1100     not  1  1 -1 -1
# 1101 nandnot  1  1 -1  0
# 1110    nand  1  1  0 -1

# pop_count_u16 returns the population count of x (16-bit unsigned).
# (x -- n)
pop_count_u16:
    ^ call pop_count_u8 swap 256/ call pop_count_u8 + ret

# pop_count_u32 returns the population count of x (32-bit unsigned).
# (x -- n)
pop_count_u32:
    ^ call pop_count_u16 swap 65536/ call pop_count_u16 + ret

# pop_count_u64 returns the population count of x (64-bit unsigned).
# (x -- n)
pop_count_u64:
    ^ call pop_count_u32 swap 4294967296/ call pop_count_u32 + ret

# exp2_u16 returns the given power of 2 in 16-bit unsigned range.
# Saturates to 1 when pow < 0 and to 32768 when pow > 15.
# (pow -- 1<<pow)
exp2_u16:
    ^ 8 j< exp2_u8
    8- call exp2_u8 256* ret

# exp2_u32 returns the given power of 2 in 32-bit unsigned range.
# Saturates to 1 when pow < 0 and to 2147483648 when pow > 31.
# (pow -- 1<<pow)
exp2_u32:
    ^ 16 j< exp2_u16
    16- call exp2_u16 65536* ret

# exp2_u64 returns the given power of 2 in 64-bit unsigned range.
# Saturates to 1 when pow < 0 and to 2147483648 when pow > 31.
# (pow -- 1<<pow)
exp2_u64:
    ^ 32 j< exp2_u32
    32- call exp2_u32 4294967296* ret

# (x -- log)
log2_u8:
