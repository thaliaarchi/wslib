# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@array"  import
    "@string" import

# transpose_square transposes a square matrix with size n*n in-place at
# addr.
# Requires n>=0
# (addr n -- )
transpose_square:
    # for i in n-1..=0
    #   for j in i-1..=0
    #     A[i][j], A[j][i] = A[j][i], A[i][j]
    ^ ^
.transpose_square_row:
    drop
    1-
    ^ jn .transpose_square_ret
    ^
.transpose_square_col:
    1-
    ^ jn .transpose_square_row
    ^3 ^2 + ^3 ^2 * + # addr + i + n*j
    ^4 ^2 + ^4 ^4 * + # addr + j + n*i
    ^ retrieve swap
    ^2 retrieve
    store store
    jmp .transpose_square_col
.transpose_square_ret:
    4drop ret

# sum computes the sum of the matrix elements.
# (addr m n -- sum)
sum:
    * jmp array.sum

# sum_row computes the sum of a row.
# (addr m n row -- sum)
sum_row:
    ^3 ^2 ^2 * + ^2 call array.sum
    4slide ret

# sum_col computes the sum of a column.
# (addr m n col -- sum)
sum_col:
    ^3 ^3 ^3 * + 1- # max
    swap ^4 + # i
    0 # sum
.sum_col_loop:
    ^2 ^2 j< .sum_col_ret # i > max
    # addr m n max i sum
    ^1 retrieve +
    swap ^3 + swap
    jmp .sum_col_loop
.sum_col_ret:
    5slide ret

# prod computes the product of the matrix elements.
# (addr m n -- prod)
prod:
    * jmp array.prod

# prod_row computes the product of a row.
# (addr m n row -- prod)
prod_row:
    ^3 ^2 ^2 * + ^2 call array.prod
    4slide ret

# prod_col computes the product of a column.
# (addr m n col -- prod)
prod_col:
    ^3 ^3 ^3 * + 1- # max
    swap ^4 + # i
    1 # prod
.prod_col_loop:
    ^2 ^2 j< .prod_col_ret # i > max
    # addr m n max i prod
    ^1 retrieve +
    swap ^3 + swap
    jmp .prod_col_loop
.prod_col_ret:
    5slide ret

# count returns the number of occurrences of x in the matrix.
# (addr m n x -- count)
count:
    ^3 ^3 ^3 * ^2 call array.count
    5slide ret

# count_row returns the number of occurrences of x in the row.
# (addr m n row x -- count)
count_row:
    ^4 ^3 ^3 * + ^3 ^2 call array.count
    5slide ret

# count_col returns the number of occurrences of x in the column.
# (addr m n col x -- count)
count_col:
    ^4 ^4 ^4 * + 1- # max
    ^2 ^6 + # i
    0 # count
.count_loop:
    ^2 ^2 j< .count_ret
    # addr m n col x max i count
    ^1 retrieve ^4 = +
    swap ^6 + swap
    jmp .count_loop
.count_ret:
    7slide ret

# print prints a row-major matrix with size m*n (m rows, n columns)
# delimited by spaces.
# (addr m n -- )
print:
    ^2 ^2
.print_loop:
    1-
    ^ jn .print_ret
    ^1 ^3 call array.print
    '\n' printc
    swap ^2 + swap
    jmp .print_loop
.print_ret:
    5drop ret

# print_chars prints a row-major matrix with size m*n (m rows, n
# columns).
# (addr m n -- )
print_chars:
    ^2 ^2
.print_chars_loop:
    1-
    ^ jn .print_chars_ret
    ^1 ^3 call string.print
    '\n' printc
    swap ^2 + swap
    jmp .print_chars_loop
.print_chars_ret:
    5drop ret

# read_chars reads a grid of chars of size m*n (m rows, n cols) to fill
# a matrix. Callers should handle the error code with jz. Clobbers the
# value at addr+m*n.
# (addr m n -- ok?)
read_chars:
    swap ^2 swap
.read_chars_loop_row:
    1- ^ jn .read_chars_ok
    swap ^2
.read_chars_loop_col:
    1- ^ jn .read_chars_next_row
    swap
    ^ ^ readc retrieve '\n' j= .read_chars_invalid
    1+ swap
    jmp .read_chars_loop_col
.read_chars_next_row:
    drop swap
    ^1 ^ readc retrieve '\n' j= .read_chars_loop_row
    0 # temp
.read_chars_invalid:
    0 5slide ret
.read_chars_ok:
    1 4slide ret
