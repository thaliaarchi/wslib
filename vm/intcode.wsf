# Copyright (c) 2021 Thalia Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

    "@array"  import
    "@mem"    import
    "@string" import

# read_program parses a comma-separated Intcode program and stores it in
# the heap.
# ( -- len ok?)
read_program:
    0 10 ',' jmp array.read_base_delim

# init_program initializes the program before the first execution.
# (offset -- )
init_program:
    0 swap ^ call mem.copy
    ret

# reset_program resets the program to before execution.
# (offset maxaddr -- )
reset_program:
    ^1 call init_program
    ^ ^2 j< .reset_program_no_clear
    ^1 - swap ^ + swap call mem.clear
    ret
.reset_program_no_clear:
    2drop ret

# set_inputs replaces the values at address 1 (noun) and address 2
# (verb).
# (offset noun verb -- )
set_inputs:
    swap ^2 1+ swap store
    swap 2+ swap store
    ret

# interpret evaluates an Intcode program and returns the exit status.
# (offset -- offset status maxaddr)
interpret:
    0 0
.interpret_loop:
    call exec_inst
    ^1 neg jn .interpret_loop
    swap 1+ swap
    ret

# exec_inst executes the Intcode instruction at pc and returns the
# updated pc. A negative pc indicates that the program has halted.
# (offset pc maxaddr -- offset pc' maxaddr')
exec_inst:
    ^2 ^2 + retrieve # opcode
    ^ 1  j= .exec_inst_add
    ^ 2  j= .exec_inst_mul
    ^ 99 j= .exec_inst_halt
    call .unknown_opcode
    1slide -2 swap ret
.exec_inst_add:
    drop call .load_binary_op
    + store ret # dest = lhs + rhs
.exec_inst_mul:
    drop call .load_binary_op
    * store ret # dest = lhs * rhs
.exec_inst_halt:
    drop 1slide -1 swap ret

# load_binary_op retrieves the destination and operands for a binary
# operator, advances pc, and updates maxaddr if dest is larger.
# (offset pc maxaddr -- offset pc' maxaddr' dest lhs rhs)
.load_binary_op:
    swap 4+ swap # pc += 4
    ^1 1- retrieve # dest
    ^ ^2 j<= .load_binary_op_addr_less
    swap drop ^ # maxaddr = dest if dest > maxaddr
.load_binary_op_addr_less:
    ^3 +                              # dest
    ^2 3- ^4 + retrieve ^4 + retrieve # lhs
    ^3 2- ^5 + retrieve ^5 + retrieve # lhs
    ret

# .unknown_opcode prints an error message for an unknown opcode.
# (opcode -- )
.unknown_opcode:
    -1 "Error: unknown opcode: " call string.print_neg_stack
    printi '\n' printc ret
